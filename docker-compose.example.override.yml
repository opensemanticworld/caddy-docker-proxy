services:
  caddy:
    networks:
      # reach the default network of an already running compose stack (e.g. 'some-compose-stack_some-container:80') without alternating it (see also networks below)
      - some-compose-stack_default
    extra_hosts:
      # reach the host network, e.g. 'host.docker.internal:8080' from within the container
      - "host.docker.internal:host-gateway"
    volumes:
      # custom ssl certs
      - ./certs:/ssl/certs
      # custom static files
      - /var/www/html/PATH:/var/www/html/PATH
    labels:
      # custom acme endpoint
      caddy.acme_ca: https://acme...
      caddy.acme_eab.key_id: xxx 
      caddy.acme_eab.mac_key: xxx
      # subpaths
      caddy.1_handle_path: /docs/*
      caddy.1_handle_path.reverse_proxy: "{{upstreams 8080}}"
      caddy.2_handle_path: /redoc/*
      caddy.2_handle_path.reverse_proxy: "{{upstreams 8080}}
      # routes
      caddy: my.domain.com
      caddy.route.0_file_server: /PATH/*
      caddy.route.0_file_server.root: "/var/www/html"
      caddy.route.1_reverse_proxy: "{{upstreams 80}}"
      # redirects
      caddy_1: some.domain.com
      caddy_1.redir: https://some.other.domain.com{uri} permanent
      caddy_1.tls: /ssl/certs/my.crt /ssl/certs/my.key
      # basic auth see: https://caddyserver.com/docs/caddyfile/directives/basicauth
      caddy.basicauth.<username>: <hashed_password_with_all_$_replaced_with_$$>

networks:
  # define default network of an already running compose stack as external (see service.caddy.networks above)
  some-compose-stack_default:
    external: true
